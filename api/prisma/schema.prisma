generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName        String
  lastName         String?
  email            String     @unique
  password         String?
  profileImg       String?
  hostingStartedAt DateTime?
  properties       Property[]
  bookings         Booking[]
  wishlists        Wishlist[]
}

model Property {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  host              User       @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId            String     @db.ObjectId
  isCompleted       Boolean    @default(false)
  title             String
  description       String?
  price             Float
  extraGuestCharge  Float?
  extraAdultCharge  Float?
  extraChildCharge  Float?
  extraInfantCharge Float?
  currency          String
  propertyType      String?
  placeType         String?
  noOfBedrooms      Int?
  noOfBathrooms     Int?
  noOfBeds          Int?
  noOfGuests        Int?
  country           String?
  state             String?
  city              String?
  address           String?
  zipCode           String?
  latitude          String?
  longitude         String?
  amenities         String[]
  nearbyActivities  String[]
  images            String[]
  bookings          Booking[]
  wishlists         Wishlist[] @relation(fields: [wishlistIds], references: [id])
  wishlistIds       String[]   @db.ObjectId
}

model Booking {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @db.ObjectId
  property         Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId       String   @db.ObjectId
  startDate        DateTime
  endDate          DateTime
  totalPrice       Float
  nightlyPrice     Float
  extraGuestCharge Float?
  currency         String
  noOfAdults       Int?
  noOfChildren     Int?
  noOfInfants      Int?
  isApproved       Boolean  @default(false)
  isCancelled      Boolean  @default(false)
}

model Wishlist {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String     @db.ObjectId
  properties  Property[] @relation(fields: [propertyIds], references: [id])
  propertyIds String[]   @db.ObjectId
  name        String
  coverImage  String?
}
